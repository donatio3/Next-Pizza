'use server'
import { CheckoutFormValues } from "@/constants";
import { prisma } from "@/prisma/prisma-client";
import { OrderStatus, Prisma } from "@prisma/client";
import { cookies } from "next/headers";
import { createPayment, sendEmail } from '@/lib';
import { getUserSession } from '@/lib/get-user-session';
import { hashSync } from 'bcryptjs';

// –≤—Å–µ —Å–µ—Ä–≤–µ—Ä–Ω—ãe actions –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ –æ–¥–Ω–æ–º —Ñ–∞–π–ª–µ 

export async function createOrder(data: CheckoutFormValues) {
    console.log(`Email: "${data.email}"`);

    try {
        const cookieStore = cookies()
        const cartToken = (await cookieStore).get('cartToken')?.value

        if (!cartToken) {
            throw Error('Cart token not found')
        }

        // –ø–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ —Ç–æ–∫–µ–Ω—É
        const userCart = await prisma.cart.findFirst({
            
            include: {
                user: true,
                items: {
                    include: {
                        ingredients: true,
                        productItem: {
                            include: {
                                product: true
                            }
                        }
                    }
                }
            },

            where: {  // –ø–æ–∏—Å–∫ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ —Ç–æ–∫–µ–Ω—É user
                token: cartToken
            },
        })

        if (!userCart) {
            throw Error('Cart not found')
        }

        // –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—É—é –∫–æ—Ä–∑–∏–Ω—É
        if (userCart?.totalAmount === 0) {
            throw Error('Cart is empty')
        }

        // C–û–ó–î–ê–ù–ò–ï –ó–ê–ö–ê–ó–ê 
        const order = await prisma.order.create({
            data: {
                token: cartToken,
                fullName: data.firstName + ' ' + data.lastName,
                email: data.email.trim(),
                phone: String(data.phone),
                address: data.address,
                comment: data.comment,
                totalAmount: userCart.totalAmount,
                status: OrderStatus.PENDING,
                items: JSON.stringify(userCart.items),
            }   
        })

        // –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        await prisma.cart.update({
            where: {
                id: userCart.id,
            },
            data: {
                totalAmount: 0,
            }
        })

        await prisma.cartItem.deleteMany({
            where: { // —É–¥–∞–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–æ—Ä–∑–∏–Ω–µ
                cartId: userCart.id,
            }
        })


        // –°–î–ï–õ–ê–¢–¨ –°–°–´–õ–ö–£ –ù–ê –û–ü–õ–ê–¢–£

        const paymentData = await createPayment({
            amount: order.totalAmount,
            description: '–û–ø–ª–∞—Ç–∞ –∑–∞–∫–∞–∑–∞ #' + order.id,
            orderId: order.id
        })


        if (!paymentData) {
            throw new Error('Payment data not found')
        }

        await prisma.order.update({
            where: {
                id: order.id
            },
            data: {
                paymentId: paymentData.confirmation.confirmation_url
            }
        })

        const paymentUrl = paymentData.confirmation.confirmation_url

        // –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –Ω–∞ –ø–æ—á—Ç—É

        const { email } = data; // –ü–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ email –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        const subject = `Next Pizza / –û–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–∫–∞–∑ #${order.id}`;
        // const body = PayOrderTemplate({
        //     orderId: order.id,
        //     totalAmount: order.totalAmount,
        //     paymentUrl
        // });
        
        // await sendEmail(`${email}`, subject, body);

        return paymentUrl // —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –í–û–ó–í–†–ê–©–ê–ï–¢–°–Ø 

    } catch (error) {
        console.log(`[CreateOrder] Server error`, error)
    }
}

// —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
export async function updateUserInfo(body: Prisma.UserUpdateInput) {
    try {
    

      const currentUser = await getUserSession(); // —á–µ–ª–æ–≤–µ–∫ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω?
  
      if (!currentUser) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω');
      }
  
      const findUser = await prisma.user.findFirst({
        where: {
          id: Number(currentUser.id),
        },
      });
  
      await prisma.user.update({
        where: {
          id: Number(currentUser.id),
        },
        data: {
          fullName: body.fullName,
          email: body.email,     // –ï–°–õ–ò –ò–ó–ú–ï–ù–ò–õ–ò –ü–ê–†–û–õ–¨ –¢–û –ú–ï–ù–Ø–ï–ú, –ò–ù–ê–ß–ï –ü–ï–†–ï–î–ê–ï–ú –¢–û–¢ –ñ–ï –ò–ó –ë–î
          password: body.password ? hashSync(body.password as string, 10) : findUser?.password,

        },
      });
    } catch (err) {
      console.log('Error [UPDATE_USER]', err);
      throw err;
    }
  }


  export async function registerUser(body: Prisma.UserCreateInput) {
    'use server'
    try {
      const user = await prisma.user.findFirst({
        where: {
          email: body.email,
        },
      });
  
      if (user) {
        if (!user.verified) {
          throw new Error('–ü–æ—á—Ç–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
        }
  
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      }
   
    const createdUser = await prisma.user.create({
        data: {
          fullName: body.fullName,
          email: body.email,
          password: hashSync(body.password, 10),
        },
      });
      
      const code = Math.floor(100000 + Math.random() * 900000).toString();
  
      await prisma.verificationCode.create({
        data: {
          code,
          userId: createdUser.id,
        },
      });
  

    //   await sendEmail(
    //     createdUser.email,
    //     'Next Pizza / üìù –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
    //     VerificationUserTemplate({
    //       code,
    //     }),
    //   );
    } catch (err) {
      console.log('Error [CREATE_USER]', err);
      throw err;
    }
  }
  








